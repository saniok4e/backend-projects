package bot

import (
	"fmt"
	"strconv"
	"tg-quiz/internal/game"
	"tg-quiz/internal/models"
	"tg-quiz/internal/utils"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// Handler –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
type Handler struct {
	bot  *tgbotapi.BotAPI
	game *game.Game
}

// NewHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
func NewHandler(bot *tgbotapi.BotAPI, game *game.Game) *Handler {
	return &Handler{
		bot:  bot,
		game: game,
	}
}

// HandleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (h *Handler) HandleMessage(msg *tgbotapi.Message) {
	userID := msg.From.ID
	text := msg.Text

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å –≤–≤–æ–¥–æ–º —Ç–µ–∫—Å—Ç–∞
	if h.game.IsActive && h.game.CurrentQIndex >= 0 && h.game.CurrentQIndex < len(h.game.Questions) {
		if q := h.game.Questions[h.game.CurrentQIndex]; q.Type == models.InputQuestion {
			if user, exists := h.game.Users[userID]; exists {
				correctAnswer := q.Options[0]
				errors := utils.LevenshteinDistance(text, correctAnswer)

				var response string
				if errors <= 2 {
					h.game.AddScore(user.Team)
					response = fmt.Sprintf("–í–µ—Ä–Ω–æ! üéâ\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: %s\n%s", correctAnswer, utils.FormatScore(user.Team.Score))
				} else {
					response = fmt.Sprintf("–ù–µ–≤–µ—Ä–Ω–æ üò¢\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: %s\n%s", correctAnswer, utils.FormatScore(user.Team.Score))
				}

				h.bot.Send(tgbotapi.NewMessage(user.ID, response))

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å
				if h.game.CurrentQIndex == len(h.game.Questions)-1 {
					h.game.EndGame(h.bot)
				}
				return
			}
		}
	}

	switch text {
	case "/start":
		if userID == h.game.AdminID {
			h.sendAdminPanel(msg.Chat.ID)
		} else if _, exists := h.game.Users[userID]; !exists {
			h.game.Users[userID] = &models.User{ID: userID}
			h.bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è:"))
		} else {
			h.bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –û–∂–∏–¥–∞–π –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã."))
		}
	case "/next":
		if userID != h.game.AdminID {
			h.bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."))
			return
		}
		if !h.game.IsActive {
			h.game.IsActive = true
		}
		h.game.CurrentQIndex++
		if h.game.CurrentQIndex >= len(h.game.Questions) {
			h.game.EndGame(h.bot)
			return
		}
		h.game.SendQuestion(h.bot)
	case "/leaders":
		h.game.ShowLeaderboard(h.bot, msg.Chat.ID)
	default:
		if user, exists := h.game.Users[userID]; exists && user.Name == "" {
			user.Name = text
			h.game.SendTeamSelection(h.bot, user.ID)
		}
	}
}

// HandleCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç –∫–Ω–æ–ø–æ–∫
func (h *Handler) HandleCallback(cq *tgbotapi.CallbackQuery) {
	userID := cq.From.ID

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
	if user, exists := h.game.Users[userID]; exists && user.Team == nil {
		switch cq.Data {
		case "team_red":
			user.Team = h.game.RedTeam
			h.bot.Send(tgbotapi.NewMessage(user.ID, fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %s! –¢—ã –≤ –∫–æ–º–∞–Ω–¥–µ üî¥ –ö—Ä–∞—Å–Ω—ã–µ. –û–∂–∏–¥–∞–π –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.", user.Name)))
			return
		case "team_blue":
			user.Team = h.game.BlueTeam
			h.bot.Send(tgbotapi.NewMessage(user.ID, fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %s! –¢—ã –≤ –∫–æ–º–∞–Ω–¥–µ üîµ –°–∏–Ω–∏–µ. –û–∂–∏–¥–∞–π –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.", user.Name)))
			return
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
	if userID == h.game.AdminID {
		switch cq.Data {
		case "next_question":
			if !h.game.IsActive {
				h.game.IsActive = true
			}
			h.game.CurrentQIndex++
			if h.game.CurrentQIndex >= len(h.game.Questions) {
				h.game.EndGame(h.bot)
				return
			}
			h.game.SendQuestion(h.bot)
			h.sendAdminPanel(cq.Message.Chat.ID)
			return

		case "show_leaders":
			h.game.ShowLeaderboard(h.bot, cq.Message.Chat.ID)
			return

		case "confirm_reset":
			h.sendResetConfirmation(cq.Message.Chat.ID)
			return

		case "cancel_reset":
			h.bot.Send(tgbotapi.NewMessage(cq.Message.Chat.ID, "–°–±—Ä–æ—Å –∏–≥—Ä—ã –æ—Ç–º–µ–Ω–µ–Ω"))
			h.sendAdminPanel(cq.Message.Chat.ID)
			return

		case "reset_game":
			h.game.ResetGame()
			h.bot.Send(tgbotapi.NewMessage(cq.Message.Chat.ID, "‚úÖ –ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –í—Å–µ –æ—á–∫–∏ –æ–±–Ω—É–ª–µ–Ω—ã."))
			h.sendAdminPanel(cq.Message.Chat.ID)
			return

		case "show_players":
			var playersList string
			for _, user := range h.game.Users {
				playersList += fmt.Sprintf("üë§ %s - %s\n", user.Name, user.Team.Name)
			}
			if playersList == "" {
				playersList = "–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
			}
			h.bot.Send(tgbotapi.NewMessage(cq.Message.Chat.ID, "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n\n"+playersList))
			return
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
	user, exists := h.game.Users[userID]
	if !exists || user.Team == nil {
		return
	}

	selectedIdx, err := strconv.Atoi(cq.Data)
	if err != nil {
		return
	}

	correctIdx := h.game.Questions[h.game.CurrentQIndex].CorrectIdx
	var response string
	if selectedIdx == correctIdx {
		h.game.AddScore(user.Team)
		response = "–í–µ—Ä–Ω–æ! üéâ\n" + utils.FormatScore(user.Team.Score)
	} else {
		response = "–ù–µ–≤–µ—Ä–Ω–æ üò¢\n" + utils.FormatScore(user.Team.Score)
	}

	h.bot.Send(tgbotapi.NewMessage(user.ID, response))

	// –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	edit := tgbotapi.NewEditMessageReplyMarkup(
		cq.Message.Chat.ID,
		cq.Message.MessageID,
		tgbotapi.InlineKeyboardMarkup{InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{}},
	)
	if _, err := h.bot.Request(edit); err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: %v\n", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å
	if h.game.CurrentQIndex == len(h.game.Questions)-1 {
		h.game.EndGame(h.bot)
	}
}

// sendAdminPanel –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
func (h *Handler) sendAdminPanel(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "üéÆ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π")

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", "next_question"),
			tgbotapi.NewInlineKeyboardButtonData("üìä –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", "show_leaders"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É", "confirm_reset"),
			tgbotapi.NewInlineKeyboardButtonData("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", "show_players"),
		),
	)

	msg.ReplyMarkup = keyboard
	h.bot.Send(msg)
}

// sendResetConfirmation –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –∏–≥—Ä—ã
func (h *Handler) sendResetConfirmation(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É?\n–í—Å–µ –æ—á–∫–∏ –±—É–¥—É—Ç –æ–±–Ω—É–ª–µ–Ω—ã!")

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", "reset_game"),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", "cancel_reset"),
		),
	)

	msg.ReplyMarkup = keyboard
	h.bot.Send(msg)
}
