package game

import (
	"fmt"
	"sort"
	"strconv"
	"tg-quiz/internal/models"
	"tg-quiz/internal/utils"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// Game –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
type Game struct {
	Users         map[int64]*models.User
	Questions     []models.Question
	CurrentQIndex int
	IsActive      bool
	AdminID       int64
	RedTeam       *models.Team
	BlueTeam      *models.Team
}

// NewGame —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–≥—Ä—ã
func NewGame(adminID int64) *Game {
	return &Game{
		Users:         make(map[int64]*models.User),
		CurrentQIndex: -1,
		IsActive:      false,
		AdminID:       adminID,
		RedTeam: &models.Team{
			Type: models.RedTeam,
			Name: "üî¥ –ö—Ä–∞—Å–Ω—ã–µ",
		},
		BlueTeam: &models.Team{
			Type: models.BlueTeam,
			Name: "üîµ –°–∏–Ω–∏–µ",
		},
		Questions: []models.Question{
			{
				Type:       models.TextQuestion,
				Text:       "–°—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏?",
				Options:    []string{"–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"},
				CorrectIdx: 0,
			},
			{
				Type:       models.PhotoQuestion,
				ContentURL: "./storage/1424-1000x830.jpg",
				Text:       "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ?",
				Options:    []string{"–î–æ–º–∏–Ω–∏–∫ –¢–æ—Ä–µ—Ç—Ç–æ", "–°–æ–±–∞–∫–∞", "–•–æ–º—è–∫", "–ö—Ä–æ–ª–∏–∫"},
				CorrectIdx: 0,
			},
			{
				Type:       models.AudioQuestion,
				ContentURL: "./storage/music/audio_7.m4a",
				Options:    []string{"–®–∞—Ä–∏–∫", "–ò–≤–∞–Ω", "–°–º–µ—à–∞—Ä–∏–∫"},
				CorrectIdx: 0,
			},
			{
				Type:       models.InputQuestion,
				Text:       "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–ª–∏—Ü—É –§—Ä–∞–Ω—Ü–∏–∏:",
				Options:    []string{"–ü–∞—Ä–∏–∂"},
				CorrectIdx: 0,
			},
		},
	}
}

// SendTeamSelection –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–º–∞–Ω–¥—ã
func (g *Game) SendTeamSelection(bot *tgbotapi.BotAPI, userID int64) {
	msg := tgbotapi.NewMessage(userID, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:")

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üî¥ –ö—Ä–∞—Å–Ω—ã–µ", "team_red"),
			tgbotapi.NewInlineKeyboardButtonData("üîµ –°–∏–Ω–∏–µ", "team_blue"),
		),
	)

	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

// SendQuestion –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
func (g *Game) SendQuestion(bot *tgbotapi.BotAPI) {
	q := g.Questions[g.CurrentQIndex]

	for _, user := range g.Users {
		var msg tgbotapi.Chattable

		switch q.Type {
		case models.TextQuestion:
			buttons := make([][]tgbotapi.InlineKeyboardButton, len(q.Options))
			for i, opt := range q.Options {
				buttons[i] = tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData(opt, strconv.Itoa(i)),
				)
			}
			textMsg := tgbotapi.NewMessage(user.ID, q.Text)
			textMsg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(buttons...)
			msg = textMsg

		case models.PhotoQuestion:
			photo := tgbotapi.NewPhoto(user.ID, tgbotapi.FilePath(q.ContentURL))
			photo.Caption = q.Text
			buttons := make([][]tgbotapi.InlineKeyboardButton, len(q.Options))
			for i, opt := range q.Options {
				buttons[i] = tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData(opt, strconv.Itoa(i)),
				)
			}
			photo.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(buttons...)
			msg = photo

		case models.AudioQuestion:
			audio := tgbotapi.NewAudio(user.ID, tgbotapi.FilePath(q.ContentURL))
			audio.Caption = q.Text
			buttons := make([][]tgbotapi.InlineKeyboardButton, len(q.Options))
			for i, opt := range q.Options {
				buttons[i] = tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData(opt, strconv.Itoa(i)),
				)
			}
			audio.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(buttons...)
			msg = audio

		case models.InputQuestion:
			textMsg := tgbotapi.NewMessage(user.ID, q.Text+"\n\n–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç:")
			msg = textMsg
		}

		if _, err := bot.Send(msg); err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞: %v\n", err)
		}
	}
}

// ShowLeaderboard –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
func (g *Game) ShowLeaderboard(bot *tgbotapi.BotAPI, chatID int64) {
	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ —Å—á–µ—Ç—É
	teams := []*models.Team{g.RedTeam, g.BlueTeam}
	sort.Slice(teams, func(i, j int) bool {
		return teams[i].Score > teams[j].Score
	})

	var leaderboard string
	for i, team := range teams {
		medal := "ü•â"
		if i == 0 {
			medal = "ü•á"
		} else if i == 1 {
			medal = "ü•à"
		}
		leaderboard += fmt.Sprintf("%s %s - %d %s\n",
			medal,
			team.Name,
			team.Score,
			utils.FormatScoreWord(team.Score))

		// –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
		for _, user := range g.Users {
			if user.Team == team {
				leaderboard += fmt.Sprintf("   üë§ %s\n", user.Name)
			}
		}
		leaderboard += "\n"
	}

	if leaderboard == "" {
		leaderboard = "–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
	}

	msg := tgbotapi.NewMessage(chatID, "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n\n"+leaderboard)
	bot.Send(msg)
}

// EndGame –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
func (g *Game) EndGame(bot *tgbotapi.BotAPI) {
	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ —Å—á–µ—Ç—É
	teams := []*models.Team{g.RedTeam, g.BlueTeam}
	sort.Slice(teams, func(i, j int) bool {
		return teams[i].Score > teams[j].Score
	})

	var leaderboard string
	for i, team := range teams {
		medal := "ü•â"
		if i == 0 {
			medal = "ü•á"
		} else if i == 1 {
			medal = "ü•à"
		}
		leaderboard += fmt.Sprintf("%s %s - %d %s\n",
			medal,
			team.Name,
			team.Score,
			utils.FormatScoreWord(team.Score))

		// –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
		for _, user := range g.Users {
			if user.Team == team {
				leaderboard += fmt.Sprintf("   üë§ %s\n", user.Name)
			}
		}
		leaderboard += "\n"
	}

	for _, user := range g.Users {
		msg := tgbotapi.NewMessage(user.ID, "üéÆ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n\nüèÜ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n\n"+leaderboard)
		bot.Send(msg)
	}

	adminMsg := tgbotapi.NewMessage(g.AdminID, "üéÆ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n\nüèÜ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n\n"+leaderboard)
	bot.Send(adminMsg)

	g.IsActive = false
	g.CurrentQIndex = -1
}

// ResetGame —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
func (g *Game) ResetGame() {
	g.CurrentQIndex = -1
	g.IsActive = false
	g.RedTeam.Score = 0
	g.BlueTeam.Score = 0
}

// AddScore –¥–æ–±–∞–≤–ª—è–µ—Ç –æ—á–∫–∏ –∫–æ–º–∞–Ω–¥–µ
func (g *Game) AddScore(team *models.Team) {
	team.Score++
}
