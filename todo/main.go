package main

import (
	"bufio"
	"fmt"
	"os"
	//"strings"
)

type Task struct {
	ID        int
	Title     string
	Completed bool
}

var Tasks []Task
var NextID int = 1

func AddTask(title string) {
	task := Task{
		ID:        NextID,
		Title:     title,
		Completed: false,
	}
	Tasks = append(Tasks, task)
	fmt.Printf("‚úÖ –ó–∞–¥–∞—á–∞[%d] \"%s\" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞\n", task.ID, task.Title)
	NextID++
}

func CompleteTask(id int) {
	for i, task := range Tasks {
		if task.ID == id {
			Tasks[i].Completed = true
			fmt.Printf("‚úÖ –ó–∞–¥–∞—á–∞ [%d] –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è\n", Tasks[i].ID)
			return
		}
	}
	fmt.Printf("‚ùå –ó–∞–¥–∞—á–∞ —Å –Ω–æ–º–µ—Ä–æ–º [%d] –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n", id)
}

func ShowTasks(filter string) {
	switch filter {
	case "all":
		fmt.Println("\n--- –ó–∞–¥–∞—á–∏ ---")
		for _, val := range Tasks {
			status := "‚ùå"
			if val.Completed {
				status = "‚úÖ"
			}
			fmt.Printf("%s –ó–∞–¥–∞—á–∞[%d] - %s\n", status, val.ID, val.Title)
		}
	case "done":
		fmt.Println("\n--- –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ ---")
		for _, val := range Tasks {
			if val.Completed {
				fmt.Printf("‚úÖ –ó–∞–¥–∞—á–∞[%d] - %s\n", val.ID, val.Title)
			}
		}
	case "pending":
		fmt.Println("\n--- –ó–∞–¥–∞—á–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ---")
		for _, val := range Tasks {
			if !val.Completed {
				fmt.Printf("‚ùå –ó–∞–¥–∞—á–∞[%d] - %s\n", val.ID, val.Title)
			}
		}
	default:
		fmt.Println("\n‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä")
	}
}

func main() {
	scanner := bufio.NewScanner(os.Stdin)

	for {
		fmt.Println("\n------ –ú–æ—è —Ç—É–¥—É—à–∫–∞ ------")
		fmt.Println("–í—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏—é:")
		fmt.Println("1. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
		fmt.Println("2. –ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é")
		fmt.Println("3. –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏")
		fmt.Println("4. –í—ã–π—Ç–∏")
		fmt.Print("–í—ã–±–æ—Ä: ")

		scanner.Scan()
		command := scanner.Text()

		switch command {
		case "1":
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ 'exit' –¥–ª—è –æ—Ç–º–µ–Ω—ã): ")
			scanner.Scan()
			task := scanner.Text()
			if task != "exit" {
				AddTask(task)
			}
		case "2":
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é: ")
			scanner.Scan()
			var id int
			fmt.Sscanf(scanner.Text(), "%d", &id)
			CompleteTask(id)
		case "3":
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä ('pending', 'done', 'all'): ")
			scanner.Scan()
			filter := scanner.Text()
			ShowTasks(filter)
		case "4":
			fmt.Println("üëã –í—ã—Ö–æ–¥–∏–º...")
			return
		default:
			fmt.Println("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥")
		}
	}
}
